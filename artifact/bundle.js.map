{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://mag-variable-update/./src/function.ts","webpack://mag-variable-update/./src/variable_init.ts","webpack://mag-variable-update/./src/main.ts"],"sourcesContent":["import { variable_events } from '@/main';\n\nexport function trimQuotesAndBackslashes(str: string): string {\n    // Regular expression to match backslashes and quotes at the beginning and end\n    return str.replace(/^[\\\\\"' ]*(.*?)[\\\\\"' ]*$/, '$1');\n}\n\n/**\n * 从大字符串中提取所有 .set(${path}, ${new_value});//${reason} 格式的模式\n * 并解析出每个匹配项的路径、新值和原因部分\n */\ninterface SetCommand {\n    fullMatch: string;\n    path: string;\n    oldValue: string;\n    newValue: string;\n    reason: string;\n}\n\nfunction extractSetCommands(inputText: string): SetCommand[] {\n    const results: SetCommand[] = [];\n\n    // 首先匹配整个 _.set 调用\n    const pattern = /_\\.set\\(([\\s\\S]*?)\\);\\s*(?:\\/\\/(.*?))?(?:\\n|$|\\r)/g;\n\n    let match;\n    while ((match = pattern.exec(inputText)) !== null) {\n        const fullContent = match[0];\n        const paramsString = match[1]; // 括号内的所有内容\n        const comment = match[2] ? match[2].trim() : '';\n\n        // 手动解析参数，处理嵌套结构\n        const params = parseParameters(paramsString);\n\n        if (params.length >= 3) {\n            results.push({\n                fullMatch: fullContent,\n                path: trimQuotesAndBackslashes(params[0]),\n                oldValue: trimQuotesAndBackslashes(params[1]),\n                newValue: trimQuotesAndBackslashes(params[2]),\n                reason: comment,\n            });\n        } else if (params.length === 2) {\n            /**\n             * _.set('时间', \"09:15\");\n             * _.set('地点', \"朝槿咖啡店\");\n             * 是的，哈基米有时候会不给老值\n             */\n            results.push({\n                fullMatch: fullContent,\n                path: trimQuotesAndBackslashes(params[0]),\n                oldValue: trimQuotesAndBackslashes(params[1]),\n                newValue: trimQuotesAndBackslashes(params[1]),\n                reason: comment,\n            });\n        }\n    }\n\n    return results;\n}\n\n// 解析参数字符串，处理嵌套结构\nfunction parseParameters(paramsString: string): string[] {\n    const params: string[] = [];\n    let currentParam = '';\n    let inQuote = false;\n    let quoteChar = '';\n    let bracketCount = 0;\n    let braceCount = 0;\n\n    for (let i = 0; i < paramsString.length; i++) {\n        const char = paramsString[i];\n\n        // 处理引号\n        if ((char === '\"' || char === \"'\") && (i === 0 || paramsString[i - 1] !== '\\\\')) {\n            if (!inQuote) {\n                inQuote = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuote = false;\n            }\n        }\n\n        // 处理方括号 (数组)\n        if (char === '[') bracketCount++;\n        if (char === ']') bracketCount--;\n\n        // 处理花括号 (对象)\n        if (char === '{') braceCount++;\n        if (char === '}') braceCount--;\n\n        // 处理参数分隔符\n        if (char === ',' && !inQuote && bracketCount === 0 && braceCount === 0) {\n            params.push(currentParam.trim());\n            currentParam = '';\n            continue;\n        }\n\n        currentParam += char;\n    }\n\n    // 添加最后一个参数\n    if (currentParam.trim()) {\n        params.push(currentParam.trim());\n    }\n\n    return params;\n}\n\nexport async function getLastValidVariable(startNum: number): Promise<Record<string, any>> {\n    for (;;) {\n        if (startNum < 0) break;\n        var currentMsg = await getChatMessages(startNum);\n        if (currentMsg.length > 0) {\n            var variables = currentMsg[0].data;\n            if (_.has(variables, 'stat_data')) {\n                return variables;\n            }\n        }\n        --startNum;\n    }\n    return await getVariables();\n}\n\nfunction pathFix(path: string): string {\n    const segments = [];\n    let currentSegment = '';\n    let inQuotes = false;\n    let quoteChar = '';\n\n    for (let i = 0; i < path.length; i++) {\n        const char = path[i];\n\n        // Handle quotes\n        if ((char === '\"' || char === \"'\") && (i === 0 || path[i - 1] !== '\\\\')) {\n            if (!inQuotes) {\n                inQuotes = true;\n                quoteChar = char;\n            } else if (char === quoteChar) {\n                inQuotes = false;\n            } else {\n                currentSegment += char;\n            }\n        } else if (char === '.' && !inQuotes) {\n            segments.push(currentSegment);\n            currentSegment = '';\n        } else {\n            currentSegment += char;\n        }\n    }\n\n    if (currentSegment) {\n        segments.push(currentSegment);\n    }\n\n    return segments.join('.');\n}\n\nexport async function updateVariables(\n    current_message_content: string,\n    variables: any\n): Promise<boolean> {\n    var out_is_modifed = false;\n    await eventEmit(variable_events.VARIABLE_UPDATE_STARTED, variables, out_is_modifed);\n    var out_status: Record<string, any> = _.cloneDeep(variables);\n    var delta_status: Record<string, any> = { stat_data: {} };\n    var matched_set = extractSetCommands(current_message_content);\n    var variable_modified = false;\n    for (const setCommand of matched_set) {\n        var { path, newValue, reason } = setCommand;\n        path = pathFix(path);\n\n        if (_.has(variables.stat_data, path)) {\n            const currentValue = _.get(variables.stat_data, path);\n            //有时候llm会返回整个数组，处理它\n            if (\n                _.isString(newValue) &&\n                newValue.trim().startsWith('[') &&\n                newValue.trim().endsWith(']')\n            ) {\n                try {\n                    const parsedArray = JSON.parse(newValue);\n                    if (Array.isArray(parsedArray) && parsedArray.length > 0) {\n                        newValue = parsedArray[0];\n                    }\n                } catch (error: any) {\n                    console.error(`Error parsing JSON array for '${path}': ${error.message}`);\n                }\n            }\n            // Check the type of the current value\n            if (typeof currentValue === 'number') {\n                // If the current value is a number, convert the new value to a number\n                const newValueNumber = Number(newValue);\n                const oldValue = currentValue;\n                _.set(variables.stat_data, path, newValueNumber);\n                const reason_str = reason ? `(${reason})` : '';\n                const display_str = `${oldValue}->${newValueNumber} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(`Set '${path}' to '${newValueNumber}' ${reason_str}`);\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    newValueNumber\n                );\n            } else if (Array.isArray(currentValue) && currentValue.length === 2) {\n                // If the current value is of type ValueWithDescription<T>\n                const newValueParsed =\n                    typeof currentValue[0] === 'number'\n                        ? Number(newValue)\n                        : trimQuotesAndBackslashes(newValue);\n                const oldValue = _.cloneDeep(currentValue[0]);\n                currentValue[0] = newValueParsed;\n                _.set(variables.stat_data, path, currentValue);\n                const reason_str = reason ? `(${reason})` : '';\n                const display_str = `${oldValue}->${newValue} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(`Set '${path}' to '${newValueParsed}' ${reason_str}`);\n                // Call the onVariableUpdated function after updating the variable\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    newValueParsed\n                );\n            } else {\n                // Otherwise, set the new value directly\n                const trimmedNewValue = trimQuotesAndBackslashes(newValue);\n                const oldValue = _.cloneDeep(currentValue);\n                _.set(variables.stat_data, path, trimmedNewValue);\n                const reason_str = reason ? `(${reason})` : '';\n                const display_str = `${oldValue}->${trimmedNewValue} ${reason_str}`;\n                _.set(out_status.stat_data, path, display_str);\n                _.set(delta_status.stat_data, path, display_str);\n                variable_modified = true;\n                console.info(`Set '${path}' to '${trimmedNewValue}' ${reason_str}`);\n                await eventEmit(\n                    variable_events.SINGLE_VARIABLE_UPDATED,\n                    variables.stat_data,\n                    path,\n                    oldValue,\n                    trimmedNewValue\n                );\n            }\n        } else {\n            const display_str = `undefined Path: ${path}->${newValue} (${reason})`;\n            console.error(display_str);\n        }\n    }\n\n    variables.display_data = out_status.stat_data;\n    variables.delta_data = delta_status.stat_data;\n    await eventEmit(variable_events.VARIABLE_UPDATE_ENDED, variables, out_is_modifed);\n    return variable_modified || out_is_modifed;\n}\n\nexport async function handleResponseMessage() {\n    const last_message = await getLastMessageId();\n    var last_chat_msg_list = await getChatMessages(last_message);\n    if (last_chat_msg_list.length > 0) {\n        var current_chat_msg = last_chat_msg_list[last_chat_msg_list.length - 1];\n        if (current_chat_msg.role != 'assistant') return;\n        var content_modified: boolean = false;\n        var current_message_content = current_chat_msg.message;\n\n        //更新变量状态，从最后一条之前的取，local优先级最低\n        const variables = await getLastValidVariable(last_message - 1);\n        if (!_.has(variables, 'stat_data')) {\n            console.error('cannot found stat_data.');\n            return;\n        }\n\n        // 使用正则解析 _.set(${path}, ${newvalue});//${reason} 格式的部分，并遍历结果\n        var variable_modified: boolean = false;\n        variable_modified =\n            variable_modified || (await updateVariables(current_message_content, variables));\n        if (variable_modified) {\n            //更新到当前聊天\n            await replaceVariables(variables);\n        }\n        //@ts-ignore\n        await setChatMessage({ data: variables }, last_message, { refresh: 'none' });\n\n        //如果是ai人物，则不插入\n        if (!current_message_content.includes('<CharView')) {\n            if (!current_message_content.includes('<StatusPlaceHolderImpl/>')) {\n                //替换状态为实际的显示内容\n                if (current_message_content.includes('<StatusPlaceHolder/>')) {\n                    //const display_str = \"```\\n\" + YAML.stringify(out_status.stat_data, 2) + \"```\\n\";\n                    //保证在输出完成后，才会渲染。\n                    const display_str = '<StatusPlaceHolderImpl/>'; //status_entry.content;\n                    //const display_str = \"```\\n\" + vanilla_str + \"```\\n\";\n                    current_message_content = current_message_content.replace(\n                        '<StatusPlaceHolder/>',\n                        display_str\n                    );\n\n                    content_modified = true;\n                } else {\n                    //如果没有，则固定插入到文本尾部\n                    const display_str = '<StatusPlaceHolderImpl/>'; //status_entry.content;\n                    current_message_content += '\\n\\n' + display_str;\n                    content_modified = true;\n                }\n            }\n        }\n\n        if (content_modified) {\n            console.info(`Replace content....`);\n            //@ts-ignore\n            await setChatMessage({ message: current_message_content }, last_message, {\n                refresh: 'display_and_render_current',\n            });\n        }\n    }\n\n    //eventRemoveListener(tavern_events.GENERATION_ENDED, hello);\n}\n","// 整体游戏数据类型\nimport { updateVariables } from '@/function';\nimport { GameData } from '@/main';\n\ntype LorebookEntry = {\n    content: string;\n    comment?: string;\n};\n\nexport async function initCheck() {\n    //generation_started 的最新一条是正在生成的那条。\n    var last_chat_msg: ChatMessageSwiped[] = [];\n    try {\n        (await getChatMessages(-2, {\n            role: 'assistant',\n            include_swipes: true,\n        })) as ChatMessageSwiped[];\n    } catch (e) {\n        //在第一行时，必定发生异常。\n    }\n    if (!last_chat_msg) {\n        last_chat_msg = [];\n    }\n    if (last_chat_msg.length <= 0) {\n        var first_msg = await getChatMessages(0, {\n            include_swipes: true,\n        });\n        if (first_msg && first_msg.length > 0) {\n            last_chat_msg = first_msg;\n        } else {\n            console.error('不存在任何一条消息，退出');\n            return;\n        }\n    }\n    var last_msg = last_chat_msg[0];\n    //检查最近一条消息的当前swipe\n    var variables = last_msg.swipes_data[last_msg.swipe_id] as GameData & Record<string, any>;\n    var lorebook_settings = await getLorebookSettings();\n    var enabled_lorebook_list = lorebook_settings.selected_global_lorebooks;\n    var char_lorebook = await getCurrentCharPrimaryLorebook();\n    if (char_lorebook !== null) {\n        enabled_lorebook_list.push(char_lorebook);\n    }\n    if (variables === undefined) {\n        variables = { display_data: {}, initialized_lorebooks: [], stat_data: {} };\n    }\n    if (!_.has(variables, 'initialized_lorebooks')) {\n        variables.initialized_lorebooks = [];\n    }\n    if (!variables.stat_data) {\n        variables.stat_data = {};\n    }\n\n    var is_updated = false;\n    for (const current_lorebook of enabled_lorebook_list) {\n        if (variables.initialized_lorebooks.includes(current_lorebook)) continue;\n        variables.initialized_lorebooks.push(current_lorebook);\n        var init_entries = (await getLorebookEntries(current_lorebook)) as LorebookEntry[];\n\n        for (const entry of init_entries) {\n            if (entry.comment?.toLowerCase().includes('[initvar]')) {\n                try {\n                    const jsonData = JSON.parse(substitudeMacros(entry.content));\n                    variables.stat_data = _.merge(variables.stat_data, jsonData);\n                } catch (e) {\n                    console.error(`Failed to parse JSON from lorebook entry: ${e}`);\n                    // @ts-ignore\n                    toastr.error(e.message, 'Failed to parse JSON from lorebook entry', {\n                        timeOut: 5000,\n                    });\n                    return;\n                }\n            }\n        }\n        is_updated = true;\n    }\n    if (!is_updated) {\n        return;\n    }\n\n    console.info(`Init chat variables.`);\n    await insertOrAssignVariables(variables);\n\n    for (var i = 0; i < last_msg.swipes.length; i++) {\n        var current_swipe_data = _.cloneDeep(variables);\n        await updateVariables(substitudeMacros(last_msg.swipes[i]), current_swipe_data);\n        //新版本这个接口给deprecated了，但是新版本的接口不好用，先这样\n        //@ts-ignore\n        await setChatMessage({ data: current_swipe_data }, last_msg.message_id, {\n            refresh: 'none',\n            swipe_id: i,\n        });\n    }\n\n    const expected_settings = {\n        /*预期设置*/\n        context_percentage: 100,\n        recursive: true,\n    };\n    const settings = await getLorebookSettings();\n    if (_.isEqual(_.merge({}, settings, expected_settings), settings)) {\n        setLorebookSettings(expected_settings);\n    }\n}\n\n//window.initCheck = initCheck;\n","// src/index.ts\nimport { handleResponseMessage } from '@/function';\nimport { initCheck } from '@/variable_init';\n\neventOn(tavern_events.GENERATION_ENDED, handleResponseMessage);\neventOn(tavern_events.MESSAGE_SENT, initCheck);\neventOn(tavern_events.GENERATION_STARTED, initCheck);\n\nexport type GameData = {\n    initialized_lorebooks: string[];\n    stat_data: Record<string, any>;\n    display_data: Record<string, any>;\n};\n\nexport const variable_events = {\n    SINGLE_VARIABLE_UPDATED: 'mag_variable_updated',\n    VARIABLE_UPDATE_ENDED: 'mag_variable_update_ended',\n    VARIABLE_UPDATE_STARTED: 'mag_variable_update_started',\n} as const;\n\n// @ts-ignore\nexport type ExtendedListenerType = {\n    [variable_events.SINGLE_VARIABLE_UPDATED]: (\n        stat_data: Record<string, any>,\n        path: string,\n        _oldValue: any,\n        _newValue: any\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_STARTED]: (\n        variables: GameData,\n        out_is_updated: boolean\n    ) => void;\n    [variable_events.VARIABLE_UPDATE_ENDED]: (variables: GameData, out_is_updated: boolean) => void;\n};\n"],"names":["trimQuotesAndBackslashes","str","replace","parseParameters","paramsString","params","currentParam","inQuote","quoteChar","bracketCount","braceCount","i","length","char","push","trim","pathFix","path","segments","currentSegment","inQuotes","join","async","updateVariables","current_message_content","variables","out_is_modifed","eventEmit","variable_events","VARIABLE_UPDATE_STARTED","out_status","_","cloneDeep","delta_status","matched_set","inputText","results","pattern","match","exec","fullContent","comment","fullMatch","oldValue","newValue","reason","extractSetCommands","variable_modified","setCommand","has","stat_data","currentValue","get","isString","startsWith","endsWith","parsedArray","JSON","parse","Array","isArray","error","console","message","newValueNumber","Number","set","reason_str","display_str","info","SINGLE_VARIABLE_UPDATED","newValueParsed","trimmedNewValue","display_data","delta_data","VARIABLE_UPDATE_ENDED","initCheck","last_chat_msg","getChatMessages","role","include_swipes","e","first_msg","last_msg","swipes_data","swipe_id","enabled_lorebook_list","getLorebookSettings","selected_global_lorebooks","char_lorebook","getCurrentCharPrimaryLorebook","undefined","initialized_lorebooks","is_updated","current_lorebook","includes","init_entries","getLorebookEntries","entry","toLowerCase","jsonData","substitudeMacros","content","merge","toastr","timeOut","insertOrAssignVariables","swipes","current_swipe_data","setChatMessage","data","message_id","refresh","expected_settings","context_percentage","recursive","settings","isEqual","setLorebookSettings","eventOn","tavern_events","GENERATION_ENDED","last_message","getLastMessageId","last_chat_msg_list","current_chat_msg","content_modified","startNum","currentMsg","getVariables","getLastValidVariable","replaceVariables","MESSAGE_SENT","GENERATION_STARTED"],"sourceRoot":""}